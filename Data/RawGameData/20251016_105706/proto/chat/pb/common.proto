syntax = "proto3";

package chat.pb;

message DelPrivateRecordReq {
  string client_id = 1;
  string target_client_id = 2;
  repeated uint64 index = 3;
  bool all = 4;
}

message DelPrivateRecordRsp {
  chat.pb.DelPrivateRecordRsp.DelPrivateRecordCode code = 1;
  string msg = 2;
  string client_id = 3;
  string target_client_id = 4;

  enum DelPrivateRecordCode {
    SUCCESS = 0;
    INNER_ERR = 1;
    NOT_REGISTER = 2;
    INDEX_ERR = 3;
  }
}

message DelChannelRecordReq {
  string client_id = 1;
  string channel_id = 2;
  uint64 index = 3;
}

message DelChannelRecordRsp {
  chat.pb.DelChannelRecordRsp.DelChannelRecordCode code = 1;
  string msg = 2;
  string client_id = 3;
  string channel_id = 4;

  enum DelChannelRecordCode {
    SUCCESS = 0;
    INNER_ERR = 1;
    NOT_REGISTER = 2;
  }
}

message DelWorldRecordReq {
  string client_id = 1;
  uint64 index = 2;
}

message DelWorldRecordRsp {
  chat.pb.DelWorldRecordRsp.DelWorldRecordCode code = 1;
  string msg = 2;
  string client_id = 3;

  enum DelWorldRecordCode {
    SUCCESS = 0;
    INNER_ERR = 1;
    NOT_REGISTER = 2;
  }
}

message GetChannelGroupInfoReq {
  string client_id = 1;
  string group_id = 2;
}

message ChannelGroupInfo {
  string channel_id = 1;
  uint32 member_count = 2;
  uint32 max_member_count = 3;
}

message GetChannelGroupInfoRsp {
  chat.pb.GetChannelGroupInfoRsp.GetChannelGroupInfoCode code = 1;
  string msg = 2;
  string client_id = 3;
  string group_id = 4;
  repeated chat.pb.ChannelGroupInfo channel_list = 5;
  string my_channel_id = 6;

  enum GetChannelGroupInfoCode {
    SUCCESS = 0;
    INNER_ERR = 1;
    NOT_REGISTER = 2;
    GROUP_ID_INVALID = 3;
  }
}

message ChannelGroupSwitchReq {
  string client_id = 1;
  string group_id = 2;
  string channel_id = 3;
}

message ChannelGroupSwitchRsp {
  chat.pb.ChannelGroupSwitchRsp.ChannelGroupSwitchCode code = 1;
  string msg = 2;
  string client_id = 3;
  string group_id = 4;
  string channel_id = 5;
  uint32 channel_member_count = 6;

  enum ChannelGroupSwitchCode {
    SUCCESS = 0;
    INNER_ERR = 1;
    NOT_REGISTER = 2;
    GROUP_ID_INVALID = 3;
    CHANNEL_ID_INVALID = 4;
    ALREADY_IN_CHANNEL = 5;
    LOCKED = 6;
    MEMBER_COUNT_LIMIT = 7;
  }
}

message AddBlackListReq {
  string client_id = 1;
  string target_client_id = 2;
}

message AddBlackListRsp {
  chat.pb.AddBlackListRsp.AddBlackListCode code = 1;
  string msg = 2;
  string client_id = 3;
  string target_client_id = 4;

  enum AddBlackListCode {
    SUCCESS = 0;
    INNER_ERROR = 1;
    NOT_REGISTER = 2;
    ALREADY_IN_LIST = 3;
  }
}

message RemoveBlackListReq {
  string client_id = 1;
  string target_client_id = 2;
}

message RemoveBlackListRsp {
  chat.pb.RemoveBlackListRsp.RemoveBlackListCode code = 1;
  string msg = 2;
  string client_id = 3;
  string target_client_id = 4;

  enum RemoveBlackListCode {
    SUCCESS = 0;
    INNER_ERROR = 1;
    NOT_REGISTER = 2;
    NOT_IN_LIST = 3;
  }
}

message GetBlackListReq {
  string client_id = 1;
}

message GetBlackListRsp {
  chat.pb.GetBlackListRsp.GetBlackListCode code = 1;
  string msg = 2;
  repeated string black_list = 3;
  string client_id = 4;

  enum GetBlackListCode {
    SUCCESS = 0;
    INNER_ERROR = 1;
    NOT_REGISTER = 2;
  }
}

message SyncBlackListReq {
  string client_id = 1;
  repeated string black_list = 2;
}

message SyncBlackListRsp {
  chat.pb.SyncBlackListRsp.SyncBlackListCode code = 1;
  string msg = 2;
  string client_id = 3;

  enum SyncBlackListCode {
    SUCCESS = 0;
    INNER_ERROR = 1;
    NOT_REGISTER = 2;
  }
}

message GetPersonalBanInfoReq {
  string client_id = 1;
}

message GetPersonalBanInfoRsp {
  chat.pb.GetPersonalBanInfoRsp.GetPersonalBanInfo code = 1;
  string msg = 2;
  string client_id = 3;
  bool is_ban = 4;
  uint64 ban_time_out = 5;
  uint32 private_left_cd = 6;
  uint32 channel_left_cd = 7;
  uint32 world_left_cd = 8;

  enum GetPersonalBanInfo {
    SUCCESS = 0;
    NOT_REGISTER = 1;
  }
}

